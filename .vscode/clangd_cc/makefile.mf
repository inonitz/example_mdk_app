COMPILER_BASE_FOLDER = "$(shell printenv COMPILER_BASE_FOLDER)"
PROJECT_FOLDER_BASE  = $(shell pwd)
PROJECT_FOLDER       = "$(shell cygpath -m $(PROJECT_FOLDER_BASE))"

BUILDDIR_BASE 	   :=build
APPEND_RELEASE_DIR :=release
APPEND_DEBUG_DIR   :=debug
APPEND_DIR_CHOSEN  :=
BUILDDIR 		   :=$(BUILDDIR_BASE)/

ifndef DEBUG
$(error DEBUG variable isn't defined. Can't proceed with build process)
else
$(info [DEBUG='$(DEBUG)'] DEBUG    Variable defined		   )
$(info [DEBUG='$(DEBUG)'] BUILDDIR Variable ["$(BUILDDIR)"])
endif

ifeq ('$(DEBUG)' , '1')
	APPEND_DIR_CHOSEN:=$(APPEND_DEBUG_DIR)
else
	APPEND_DIR_CHOSEN:=$(APPEND_RELEASE_DIR)
endif


SRCDIR    :=source
BUILDDIR  :=$(BUILDDIR)$(APPEND_DIR_CHOSEN)
OBJDIR    :=$(BUILDDIR)/obj
OUTPUTDIR :=$(BUILDDIR)/bin
$(info [DEBUG='$(DEBUG)'] BUILDDIR Variable ["$(BUILDDIR)"] )




PROJNAME = awc2app
TARGET   = $(PROJNAME).exe
LINKER   = $(COMPILER_BASE_FOLDER)/bin/ld.lld.exe
CPPC  	 = $(COMPILER_BASE_FOLDER)/bin/clang++.exe
CC  	 = $(COMPILER_BASE_FOLDER)/bin/clang.exe
ASMC 	 = $(COMPILER_BASE_FOLDER)/bin/clang.exe
ASMFLAGS = -O0
CVERSION   = c11
CXXVERSION = c++17

CXXFLAGS_RELEASE = \
	-O3 \
	-ffast-math \

CXXFLAGS_DEBUG = \
	-g \
	-Os \
	-D_DEBUG \


CXXFLAGS = \
	-c \
	-municode \
	-pedantic \
	-Werror \
	-Wall \
	-Wextra \
	-march=native \
	-mtune=native \
	-D__GXX_TYPEINFO_EQUALITY_INLINE=0 \




ifeq ('$(DEBUG)' , '1')
	CXXFLAGS += $(CXXFLAGS_DEBUG)
else
	CXXFLAGS += $(CXXFLAGS_RELEASE)
endif


LIB_FILES     = \
	-lmonodevkit_$(APPEND_DIR_CHOSEN) \
	-lglfw3 \
	-lm \

LIB_INC_PATHS = \
	-I$(COMPILER_BASE_FOLDER)/ext/monodevkit/include \
	-I$(COMPILER_BASE_FOLDER)/ext/GLFW/include \
	-I$(PROJECT_FOLDER)/source \


LIB_PATHS     = \
	-L"C:/Windows/SYSTEM32/" \
	-L$(COMPILER_BASE_FOLDER)/lib \
	-L$(COMPILER_BASE_FOLDER)/x86_64-w64-mingw32/14.2.0 \
	-L$(COMPILER_BASE_FOLDER)/x86_64-w64-mingw32/lib \
	\
	-L$(COMPILER_BASE_FOLDER)/ext/monodevkit/lib \
	-L$(COMPILER_BASE_FOLDER)/ext/GLFW/lib-mingw-w64 \


# --verbose \
# useful in case of linking errors in a shared/static library, and you're absolutely sure that you're doing nothing wrong
# find "C:/CTools/toolchain_new"/x86_64-w64-mingw32/lib -type f \( -executable -o -name \*.o \) -exec C\:/CTools/toolchain_new/bin/nm.exe -A {} + | grep "atexit"



rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

CSRC    = $(call rwildcard,$(SRCDIR),*.c)
CPPSRC += $(call rwildcard,$(SRCDIR),*.cpp)
ASMSRC  = $(call rwildcard,$(SRCDIR),*.asm)
OBJS  = $(patsubst $(SRCDIR)/%.asm,$(OBJDIR)/%_asm.o,$(ASMSRC))
OBJS += $(patsubst $(SRCDIR)/%.c,$(OBJDIR)/%_c.o,$(CSRC))
OBJS += $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%_cpp.o,$(CPPSRC))


# Compile All C, C++, ASM Files that are part of the source directory
$(OBJDIR)/%_asm.o: $(SRCDIR)/%.asm
	@ echo -n "[COMPILE][ASM]["$^"] "
	@ mkdir -p $(@D)
	$(ASMC) $(ASMFLAGS) $^ -o $@


$(OBJDIR)/%_c.o: $(SRCDIR)/%.c
	@ echo -n "[COMPILE][C]["$^"] "
	@ mkdir -p $(@D)
	$(CC) -std=$(CVERSION) $(CXXFLAGS) $(LIB_INC_PATHS) $^ -o $@ 


$(OBJDIR)/%_cpp.o: $(SRCDIR)/%.cpp
	@ echo -n "[COMPILE][CXX]["$^"] "
	@ mkdir -p $(@D)
	$(CPPC) -std=$(CXXVERSION) $(CXXFLAGS) $(LIB_INC_PATHS) $^ -o $@


LDFLAGS := \
	--verbose \
	-ferror-limit=0 \
	-fPIC \
	-nodefaultlibs \
	-Wl,--subsystem,windows \
	-Wl,-R$(COMPILER_BASE_FOLDER)/ext/monodevkit/lib \
	-Wl,-rpath-link=$(COMPILER_BASE_FOLDER)/ext/monodevkit/lib \

LIB_FILES := \
	-lkernel32 \
	-luser32 \
	-lmsvcrt \
	-lmsvcrt-os \
	-lmingw32 \
	-lmingwex \
	-lmsvcrt \
	-lmsvcrt-os \
	-lgcc \
	-lgcc_s \
	-lstdc++ \
	-lpthread \
	$(LIB_FILES) \


link:
	@ echo Linking ...
	$(LINKER) $(LIB_PATHS) $(OBJS) -o $(OUTPUTDIR)/$(TARGET) $(LDFLAGS)

build_internal:
	@ printf "Joe nuts"
	$(CPPC) $(LDFLAGS) -o $(OUTPUTDIR)/$(TARGET) $(OBJS) $(LIB_PATHS) $(LIB_FILES)

build: $(OBJS) build_internal



# Don't Forget to Pipe the Output to a text file! (==> make debug_compile &> debug_out.txt)
debug_compile: CXXFLAGS += --verbose
debug_compile: build


clean_internal:
	@ echo -n "Deleting Compiled Files ... "  
	-@ rm -r $(OBJDIR)/* &> /dev/null || true
	@ echo "Done! "


cleanbin_internal:
	@ echo -n "Deleting Project Executable ... "
	-@ rm -r $(OUTPUTDIR)/$(TARGET) &> /dev/null || true
	@ echo "Done! "


run:
	@ echo " Running Compiled Executable ... "
	./$(OUTPUTDIR)/$(TARGET)

info:
	@ echo -e "File List: $(ASMSRC) $(CSRC) $(CPPSRC)\nObject List: $(OBJS)\n"



.PHONY: info run cleanall cleanbin